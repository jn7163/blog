<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Queensferry&#39;s Blog</title>
    <link>https://qufy.me/tags/python/</link>
    <description>Recent content in python on Queensferry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 31 Mar 2019 16:40:16 +0000</lastBuildDate>
    
	<atom:link href="https://qufy.me/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask &#43; Celery &#43; Redis 实现异步处理任务队列</title>
      <link>https://qufy.me/posts/technique/web/backend/flask-celery-redis-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 31 Mar 2019 16:40:16 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/web/backend/flask-celery-redis-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;最近正在尝试编写网站，其中一个功能是帮助用户从某个 URL 抓取信息 —— 也就是爬虫 。但众所周知，爬虫程序由于 I/O 阻塞通常会消耗较长的时间，无法第一时间对用户请求作出响应 。因此我们会希望让爬虫任务在后台处理，等到执行成功/失败后再将结果返回给用户；而&lt;strong&gt;任务队列&lt;/strong&gt;就作为 Web 后端接口与爬虫处理程序之间的一个中介，负责传输任务的具体内容和执行结果 。这篇博客不会具体阐述 Flask Web 开发或 Python 爬虫的相关技术，而将重点聚焦于使用流行的开源异步任务处理框架 &lt;code&gt;Celery&lt;/code&gt; 实现一个任务队列的基本功能 。&lt;/p&gt;

&lt;p&gt;（我才不是出于咕咕咕的负罪感连更博客的）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 使用元类实现单例模式</title>
      <link>https://qufy.me/posts/technique/basis/design-pattern/python-%E4%BD%BF%E7%94%A8%E5%85%83%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 05 Mar 2019 19:18:10 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/basis/design-pattern/python-%E4%BD%BF%E7%94%A8%E5%85%83%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;上次在工厂模式中提到了单例模式，说有空再写（咕）。啊不过也没咕多久啦～这篇博客就介绍一下如何用 Python 元类简单优雅地实现单例模式 。&lt;/p&gt;

&lt;p&gt;在一些使用场景里，我们会希望某些类只能创建一个实例，以避免重复造成的资源浪费或是冲突等情况 —— 例如 Windows 系统下的回收站无论如何只能打开一个窗口 —— 这就算是单例模式的应用 。我们通过使用 Python 元类就能非常优雅地实现单例模式 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 实现工厂模式</title>
      <link>https://qufy.me/posts/technique/basis/design-pattern/python-%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 23 Feb 2019 19:39:37 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/basis/design-pattern/python-%E5%AE%9E%E7%8E%B0%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;前几天订阅的 RSS 给我推送了 &lt;a href=&#34;https://realpython.com/factory-method-python/#supporting-additional-formats&#34;&gt;The Factory Method Pattern and Its Implementation in Python&lt;/a&gt;，于是就研究了一番工厂模式 。工厂模式从简单到复杂大约可以分为&lt;strong&gt;简单工厂模式&lt;/strong&gt;（又称静态工厂方法模式），&lt;strong&gt;工厂方法模式&lt;/strong&gt;（又称多态工厂模式）与&lt;strong&gt;抽象工厂模式&lt;/strong&gt;；都是工厂（Factory）—产品（Product）—客户（Client）这样的基础架构 。作为一种创建型模式（Creational Pattern），工厂模式的核心理念就是让某个工厂类来负责生产对象（即产品），客户端只需要提供特定的参数即可；将对象创建和业务处理分离降低系统的耦合度，使得两者修改起来都相对容易 。本文依旧采用 python 实现这一设计模式 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 实现观察者模式/发布订阅模式</title>
      <link>https://qufy.me/posts/technique/basis/design-pattern/python-%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Thu, 07 Feb 2019 10:21:55 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/basis/design-pattern/python-%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;春节回乡拜年莫得电脑，于是窝在阁楼上看了些文字 —— 其中就包括&lt;code&gt;发布订阅模式&lt;/code&gt;的一些相关内容 。&lt;code&gt;发布订阅模式&lt;/code&gt;是设计模式中的比较简单一种；它定义了消息在生产者/发布者与消费者/订阅者之间传递的方式 。实际开发中我们通常会使用 Redis / ZeroMQ 等中间件来实现消息分发，但这里我只用 Python 来描述其中的逻辑关系 —— 使用其他语言乃至中间件的逻辑关系基本都是相同的，只有一些细节性差别 。&lt;strong&gt;值得一提的是&lt;/strong&gt;，尽管多数情况下我们将&lt;code&gt;观察者模式&lt;/code&gt;与&lt;code&gt;发布订阅模式&lt;/code&gt;混为一谈（或认为&lt;code&gt;观察者=发布+订阅&lt;/code&gt;），但事实上它们之间存在一定的区别，这点我稍后也会提到 。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 学习手记：使用 smtplib 发送邮件</title>
      <link>https://qufy.me/posts/technique/language/python/python-%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0%E4%BD%BF%E7%94%A8-smtplib-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Sat, 19 Jan 2019 12:04:16 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/language/python/python-%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0%E4%BD%BF%E7%94%A8-smtplib-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid>
      <description>&lt;p&gt;高中时期就用 Python 写过一个邮件发送脚本，但当时的逻辑处理得相当凌乱 。这次利用了一个周末晚上总结规整了一下 &lt;code&gt;smtplib&lt;/code&gt; 与 &lt;code&gt;email&lt;/code&gt; 模块的用法，并写了一个鲁棒性比较强且支持模板填充的&lt;a href=&#34;https://gist.github.com/queensferryme/fac00cb791b7d53e49ad12a72b19d754&#34;&gt;邮件群发脚本&lt;/a&gt; 。这篇博客就简单记录一下 。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>