<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flask on Queensferry&#39;s Blog</title>
    <link>https://qufy.me/tags/flask/</link>
    <description>Recent content in flask on Queensferry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 31 Mar 2019 16:40:16 +0000</lastBuildDate>
    
	<atom:link href="https://qufy.me/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask &#43; Celery &#43; Redis 实现异步处理任务队列</title>
      <link>https://qufy.me/posts/technique/web/backend/flask-celery-redis-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</link>
      <pubDate>Sun, 31 Mar 2019 16:40:16 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/web/backend/flask-celery-redis-%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;最近正在尝试编写网站，其中一个功能是帮助用户从某个 URL 抓取信息 —— 也就是爬虫 。但众所周知，爬虫程序由于 I/O 阻塞通常会消耗较长的时间，无法第一时间对用户请求作出响应 。因此我们会希望让爬虫任务在后台处理，等到执行成功/失败后再将结果返回给用户；而&lt;strong&gt;任务队列&lt;/strong&gt;就作为 Web 后端接口与爬虫处理程序之间的一个中介，负责传输任务的具体内容和执行结果 。这篇博客不会具体阐述 Flask Web 开发或 Python 爬虫的相关技术，而将重点聚焦于使用流行的开源异步任务处理框架 &lt;code&gt;Celery&lt;/code&gt; 实现一个任务队列的基本功能 。&lt;/p&gt;

&lt;p&gt;（我才不是出于咕咕咕的负罪感连更博客的）&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker 初探：部署 MySQL 与 Flask 服务</title>
      <link>https://qufy.me/posts/technique/web/devops/docker-%E5%88%9D%E6%8E%A2%E9%83%A8%E7%BD%B2-mysql-%E4%B8%8E-flask-%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Tue, 30 Oct 2018 08:38:23 +0000</pubDate>
      
      <guid>https://qufy.me/posts/technique/web/devops/docker-%E5%88%9D%E6%8E%A2%E9%83%A8%E7%BD%B2-mysql-%E4%B8%8E-flask-%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;Docker 是目前很流行的应用容器化技术；它能以小得多的资源占用实现系统级别的虚拟化，达到类似虚拟机的效果。使用 Docker 部署自己的应用十分方便而强大：你既不需要费心于各种与应用无关的繁琐配置；又同时拥有对应用高度的自由化管理权限。这篇博客记录一下我初步学习使用 Docker 的成果。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>